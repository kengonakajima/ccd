# ccd 実装タスク一覧（段階的アプローチ）

## フェーズ1: おうむがえしBot作成

### 高優先度タスク

1. 【フェーズ1】プロジェクトの初期設定（package.json作成、discord.jsインストール）
   - package.json の作成
   - discord.js のインストール
   - dotenv のインストール
   - 基本的なディレクトリ構造の作成

2. 【フェーズ1】.envファイルの設定と.gitignoreの作成（DISCORD_TOKENのみ）
   - .env.example ファイルの作成
   - .gitignore ファイルの作成（.envを含む）
   - DISCORD_TOKEN の設定

3. 【フェーズ1】おうむがえしBotの実装（メッセージ受信→そのまま返信）
   - Discord Client の初期化
   - WebSocket接続の確立
   - Bot のログイン処理
   - メッセージイベントのリスナー設定
   - 受信メッセージをそのまま返信する処理

4. 【フェーズ1】おうむがえしBotの動作テスト
   - Discordサーバーでの動作確認
   - Bot宛メッセージの送受信テスト

## フェーズ2: Claude Code連携

### 中優先度タスク

5. 【フェーズ2】Claude Code SDKのインストールと設定
   - @anthropic-ai/sdk のインストール
   - 必要な依存関係の追加

6. 【フェーズ2】.envファイルにANTHROPIC_API_KEYを追加
   - .env.example の更新
   - ANTHROPIC_API_KEY の設定

7. 【フェーズ2】Claude Code SDK統合（query関数の実装）
   - Anthropic SDK の初期化
   - query 関数の実装
   - API通信の設定

8. 【フェーズ2】おうむがえしからClaude応答への切り替え
   - メッセージ処理ロジックの更新
   - Claude への問い合わせ処理
   - 応答の受信と処理

9. 【フェーズ2】長文メッセージの分割処理
   - Discord の文字数制限対応
   - メッセージ分割ロジックの実装

## 仕上げフェーズ

### 低優先度タスク

10. エラーハンドリングとログ機能の実装
    - グローバルエラーハンドラー
    - 各処理のエラーハンドリング
    - ログ出力の実装

11. CLIツールとしての完成度向上
    - bin/ccd の作成
    - コマンドライン引数の処理
    - プロセス管理

12. ドキュメント作成（README.md、使用方法）
    - 基本的な使い方の文書化
    - セットアップ手順の記載
    - APIキーの取得方法の説明

## フェーズ3: 画像送信機能（HTTPサーバー方式）

### 高優先度タスク

13. ExpressによるHTTPサーバー機能の実装 : done
    - express のインストール : done
    - HTTPサーバーの起動（空きポート使用） : done
    - ポート番号のログ出力 : done

14. /send_image エンドポイントの実装 : done
    - POSTリクエストの受付 : done
    - チャンネルIDとファイルパスのパラメータ処理 : done
    - 画像ファイルのDiscordへの送信 : done

15. Claude Codeへのプロンプト調整 : done
    - HTTPサーバーのポート番号を含める : done
    - curlコマンドでの画像送信方法の説明 : done
    - screenshotコマンドとの連携方法の説明 : done

### 中優先度タスク

16. エラーハンドリングとレスポンス
    - ファイルが存在しない場合のエラー処理
    - チャンネルIDが無効な場合のエラー処理
    - 適切なHTTPステータスコードの返却

17. セキュリティ対策
    - ローカルホストのみからのアクセスに制限
    - ファイルパスのサニタイズ
    - リクエストサイズの制限


